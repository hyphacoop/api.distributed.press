types {
  application/activity+json jsonld;
}

server {
  server_name {{item}};

  root {{distributed_press_site_storage}}/{{item}}/;

  # P2P protocols support more types of index files than just HTML
  index index.html index.md index.gmi index.gemini README.md;

  error_page 404 /404.html;

  add_header Cache-Control no-cache;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
  add_header X-Frame-Options "sameorigin";
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options "nosniff";
  add_header Referrer-Policy "strict-origin-when-cross-origin";

  add_header 'Access-Control-Allow-Origin' '*';
  add_header 'Access-Control-Allow-Credentials' 'true';
  add_header 'Access-Control-Allow-Methods' '*';
  add_header 'Access-Control-Allow-Headers' '*';
  add_header 'X-Ipfs-Path' '/ipns/{{ item }}';

  location / {
    # First attempt to serve request as file, then
    # as directory, then fall back to displaying a 404.
    # Also try loading .html/.md/.gemini/.gmi files
    try_files $uri $uri/ $uri.html $uri.md $uri.gmi $uri.gemini =404;

    location = /.well-known/webfinger {
      default_type application/jrd+json;
    }

    location = /.well-known/host-meta {
      default_type application/xrd+xml;
    }

    location = /.well-known/nodeinfo {
      default_type "application/jrd+json";
    }
  }

  listen [::]:443 ssl; # managed by Certbot
  listen 443 ssl; # managed by Certbot
  ssl_certificate /etc/letsencrypt/live/{{distributed_press_cert_name}}/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/{{distributed_press_cert_name}}/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  # Some Fediverse endpoints don't include an extension and we'd need to
  # configure everything.  By adding index.json, we can serve these
  # endpoints as directories.
  index index.html index.json;
}

server {
  server_name {{item}};

  listen 80;
  listen [::]:80;

  return  301 https://{{item}}$request_uri;
}

